package tw.com.soyong.mebook;

import java.io.IOException;
import java.util.ArrayList;
import java.util.EmptyStackException;
import java.util.Stack;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Mebook
//  @ File Name : SyBook.java
//  @ Date : 2009/3/23
//  @ Author : Victor
//
//

public abstract class SyBook<T> extends MebookData {
	
    /**
     * Flags definition to be used in method buildTree.
     */
    public static final int BT_ALL           = 0x00000100;
    public static final int BT_HEAD_ONLY     = 0x00000200;
    public static final int BT_DATA_INCLUDE  = 0x00000400;
    public static final int BT_DATA_EXCLUDE  = 0x00000800;	
    
    
    /**
     * Flags definition to be used in method findNode.
     */
    public static final int FIND_NODE = 0x00000001;
    public static final int FIND_LEAF = 0x00000002;
    public static final int FIND_ALL  = 0x00000004;
    
    
    /* Node ID */
	public static final String T_NODE_PIC = "NDPIC"; // pool for bmp only
    public static final String T_NODE_IMG = "NDIMG"; // pool for all image type    


    
	private SyTreeNode<T> mRoot;
	private String mBookFileName ;
	SyTreeNode<T> mImgRoot;				// save imag root node for cache
	
	
    final byte [] getLeafData(SyItem item, final SyInputStream is) {

    	byte [] data = null;
        if (null != item) {
            // if we read header only
            if (null == item.mLeafData) {
                try {
                    data = new byte[item.mSize];

                    is.seek(item.mPosition);
                    is.read(data);
                } catch (IOException ex) {
                	ex.printStackTrace();
                }
            }
        }
        return data;
    }	
	
    final byte [] getLeafData(SyItem item) {

    	byte [] data = null;
        if (null != item) {
            // if we read header only
            if (null == item.mLeafData) {
                try {
                    SyInputStream fis;
                    data = new byte[item.mSize];

                    fis = new SyInputStream(mBookFileName);
                    fis.seek(item.mPosition);
                    fis.read(data);
                    fis.close();
                    fis = null;
                } catch (IOException ex) {
                	ex.printStackTrace();
                }
            }
        }
        return data;
    }
		
	
	final public SyTreeNode<T> findNode(String id, int findway) {
		return findNode( mRoot , id , findway);
	}
	
	final public SyTreeNode<T> findNode(SyTreeNode<T> root, String id, int findway) {

	    if (null != root) {
			ArrayList<SyTreeNode<T>> children = root.getChildren();

			boolean isNode;
			
			for (SyTreeNode<T> node : children) {
				T item = node.getData();
				isNode = SyItem.isNode((SyItem) item);

				if ((((findway & FIND_NODE) != 0 && isNode) ||
				     ((findway & FIND_LEAF) != 0 && !isNode))&&
					 0 == ((SyItem) item).mID.compareTo(id)) {
					return node;
				}

				if ((findway & FIND_ALL) != 0 && isNode) {
					SyTreeNode<T> nodeOfTarget = findNode(node, id, findway);
					if (nodeOfTarget != null) {
						return nodeOfTarget;
					}
				}
			}
		}
		return null;
	}
	
	final private void pushStack(final Stack<SyTreeNode<T>> stack, final SyTreeNode<T> node) {
        SyItem item = (SyItem) node.getData();
        item.mItemCount = item.mItem;
        stack.push(node);		
	}
	
	final private void checkStackAndPop( final Stack<SyTreeNode<T>> stack) {
		try{
			SyTreeNode<T> treeNode = stack.peek();
			if (treeNode == null){ 
				return;
			}

			SyItem item = (SyItem) treeNode.getData();
			item.mItemCount--;
			if (0 == item.mItemCount) {
				stack.pop();
				checkStackAndPop(stack);
			}	            
		}catch (EmptyStackException e){
			return ;
		}
	}
	
	public SyBook(int encMode) {
		super(encMode);
		
		mImgRoot = null;
	}
	
	
	public SyItem getData(String id, int mode,  final SyInputStream is ) throws MebookException{
		
		if ( DATA_TXT == mode && 0 == id.compareTo(MebookData.ARTICLE)){
			throw new MebookException();
		}
		
		SyItem syItem = null;
		if (DATA_IMG == mode) {
			
			// get Img root node
			SyTreeNode<T> root = mImgRoot ;
			if (null == root) {
				root = findNode(T_NODE_IMG, FIND_NODE);
				if (null == root) { // find Jpg image
					root = findNode(T_NODE_PIC, FIND_NODE); // find dib image
				}
				
				if ( null != root){
					mImgRoot = root ;
				}
			}

			// get Img data
			SyItem item = null;
			byte[] data = null;
			if (null != root) {
				SyTreeNode<T> node = findNode(root, id, FIND_LEAF);
				
				if (null != node) {
					item = (SyItem) node.getData();
					data = getLeafData(item, is);
					if ( mEncMode >0 && mEncMode < 3 ){
						SyDecrypt.decrypt(mEncMode, data);
					}

					if (SyItem.isDIB(item)) {
						
						try {
							data = BMPGenerator.encodeBMP(data);
						} catch (IOException e) {
							e.printStackTrace();
						}
						
						syItem = new SyItem(data, SyItem.TAG_FLAG_TYPE_BMP);
					} else {
						syItem = new SyItem(data, item);
					}
				}
			}
		}
		
		return syItem;
	}	
	
	public SyItem getData(String id, int mode) throws MebookException{
		
		if ( DATA_TXT == mode && 0 == id.compareTo(MebookData.ARTICLE)){
			throw new MebookException();
		}
		
		SyItem syItem = null;
		if (DATA_IMG == mode) {
			
			// get Img root node
			SyTreeNode<T> root = mImgRoot ;
			if (null == root) {
				root = findNode(T_NODE_IMG, FIND_NODE);
				if (null == root) { // find Jpg image
					root = findNode(T_NODE_PIC, FIND_NODE); // find dib image
				}
				
				if ( null != root){
					mImgRoot = root ;
				}
			}

			// get Img data
			SyItem item = null;
			byte[] data = null;
			if (null != root) {
				SyTreeNode<T> node = findNode(root, id, FIND_LEAF);
				
				if (null != node) {
					item = (SyItem) node.getData();
					data = getLeafData(item);
					if ( mEncMode >0 && mEncMode < 3 ){
						SyDecrypt.decrypt(mEncMode, data);
					}

					if (SyItem.isDIB(item)) {
						
						try {
							data = BMPGenerator.encodeBMP(data);
						} catch (IOException e) {
							e.printStackTrace();
						}
						
						syItem = new SyItem(data, SyItem.TAG_FLAG_TYPE_BMP);
					} else {
						syItem = new SyItem(data, item);
					}
				}
			}
		} else if (IMG_COUNT == mode) {
			
				// get Img root node
				SyTreeNode<T> root = mImgRoot;
				if (null == root) {
					root = findNode(T_NODE_IMG, FIND_NODE);
					if (null == root) { // find Jpg image
						root = findNode(T_NODE_PIC, FIND_NODE); // find dib
						// image
					}

					if (null != root) {
						mImgRoot = root;
					}
				}

				if (null == root) {
					syItem = new SyItem(0);
				} else {

					ArrayList<SyTreeNode<T>> children = root.getChildren();

					boolean isNode;
					int num = 0;

					for (SyTreeNode<T> node : children) {
						T item = node.getData();
						isNode = SyItem.isNode((SyItem) item);

						if (false == isNode) {
							num++;
						}
					}

					syItem = new SyItem(num);
				}
		}
		return syItem;
	}
		
	protected abstract T getT(); 

	boolean buildTree(SyItemInputStream is, int buildType) throws IOException {

        boolean ret = true;
		Stack<SyTreeNode<T>> stack = new Stack<SyTreeNode<T>>();

		T item;
		SyTreeNode<T> treeNode;
		while (true) {
			item = getT();
			
			if (!is.readSyItem((SyItem)item, buildType)) {
				break;
			}

			treeNode = new SyTreeNode<T>(item);
			if (null == mRoot) {
				mRoot = treeNode ;
			} else {
				if (stack.peek() == null) {
					break;
				}
				stack.peek().addChild(treeNode);
			}

			if (SyItem.isNode((SyItem) item))
				pushStack(stack, treeNode);
			else
				checkStackAndPop(stack);
		}
		return ret;
    }	

	@Override
	public void load(String file, long pos, int size) {
		super.load(file, pos, size);
		
		try {
			SyItemInputStream is = new SyItemInputStream( file );			
			is.seek(pos);
			buildTree(is, SyBook.BT_HEAD_ONLY );
			
			mBookFileName = file ;
			
			mImgRoot = null;			// clean up cache
		} catch (IOException e) {
			e.printStackTrace();
		}
	}


	@Override
	public void load(SyInputStream sis, long pos, int size) {
		try {
			SyItemInputStream is = new SyItemInputStream( sis );			
			is.seek(pos);
			buildTree(is, SyBook.BT_HEAD_ONLY );
			
			is.close();
			is = null;
			
			mImgRoot = null;			// clean up cache
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}
	
}
