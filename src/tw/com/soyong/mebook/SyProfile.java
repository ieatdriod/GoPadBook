package tw.com.soyong.mebook;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

import android.util.Log;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Mebook
//  @ File Name : SyProfile.java
//  @ Date : 2009/3/23
//  @ Author : Victor
//
//

public class SyProfile {
	
	private static boolean DEBUG = false ;
	private static final String TAG = "SyProfile";
	
    public static final int OK = 0 ;
    public static final int INVALID_PROFILE = 1 ;       // profile not exist, or tag not match
    public static final int INVALID_SERIAL_NO = 2 ;     // profile contant serial no not match in this device
    public static final int INVALID_CONTENT_ID = 3;     // content id not match
    
    public static final int TAG_SIZE = 4;
    public static final String SY_PRO_TAG = "VRPF";
    static final int HEADER_SIZE = 40;
    static final int CONTENTID_LENGTH = 10 ;
    static final int SERIALNO_LENGTH = 11;    
	
	public byte[] mData;
	public SyProfileHeader mHeader;
	public int mSerIDBegin;
	public int mValiadTableBegin;
	public int mContentIDBegin;
	
	public SyProfile() {
		mHeader = new SyProfileHeader();
	}
	
	static final String decodeID(final byte[] id) {
		
        final String encodeKey = "VICTORCHRIS";
        char [] key = encodeKey.toCharArray() ;
        
        final int keyLen = key.length;
        final int idLen = id.length;
        byte [] decode = new byte [idLen];

        for (int i = 0; i < idLen; ++i) {
            decode[i] = (byte) ((id[i] ^ key[i % keyLen])&0xff) ;
        }

        String strID = new String( decode ) ;
        return strID;		
	}
	
	public int checkContentIDWithinProfile(String contentID) {
		
        int keyState = INVALID_PROFILE;
        byte [] data = mData;
        if (null != data) {
        	SyProfileHeader header = mHeader;
            int validValue = header.mValidValue;
            int contentIdIndex = mContentIDBegin;
            byte[] id = new byte[CONTENTID_LENGTH];
            
            String strID;
            keyState = INVALID_CONTENT_ID;
            int totalEntryNo = header.mTotalEntryNo;
            int validTableBegin = mValiadTableBegin;
            for (int i = 0; i < totalEntryNo ; i++) {
                if (validValue != data[validTableBegin + i]) {
                    contentIdIndex += CONTENTID_LENGTH;
                    continue;   // pseudo entry
                }

                // Retrieve one content ID.
                System.arraycopy(data, contentIdIndex, id, 0, CONTENTID_LENGTH);
                if ( DEBUG ) Log.d(TAG , "contentIdIndex:"+contentIdIndex );
                
                strID = decodeID(id);

                if (0 == strID.compareTo(contentID)) {
                    keyState = OK;
                    break;
                }
                contentIdIndex += CONTENTID_LENGTH;
            }
        }
        return keyState;
	}
	
	public int checkMachineIDWithinProfile(final String machineID) {
        int keyState = INVALID_PROFILE;
        byte [] data = mData;
        if (null != data) {
            int serIdIndex = mSerIDBegin;
            byte[] ser = new byte[SERIALNO_LENGTH];
            String strSer;
            String strMID = machineID.substring(0, machineID.length()-1);   // remove check sum
            keyState = INVALID_SERIAL_NO;
            
            SyProfileHeader header = mHeader;
            final int totalSerialNo = header.mTotalSerialNo;
            for (int i = 0; i < totalSerialNo; i++) {

                System.arraycopy(data, serIdIndex, ser, 0, SERIALNO_LENGTH);
                strSer = decodeID(ser);

                if (0 == strSer.compareTo(strMID)) {
                    keyState = OK;
                    break;
                }
                serIdIndex += SERIALNO_LENGTH;
            }
        }
        return keyState;
	}
	
	static public boolean isSyProfile(String file) {
		boolean ret = false;
		try {

			FileInputStream is = new FileInputStream(file);

			byte [] tag = new byte[TAG_SIZE];
			is.read(tag);
			is.close();

			String strTag = new String(tag);
			if (0 == strTag.compareTo(SY_PRO_TAG)) {
				ret = true;
			}
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		return ret;
	}
	
	public boolean load(String file) {
        boolean ret = false ;
		try {
			
			if ( null != mData){
				return ret ;		// no support reload()
			}
			
			FileInputStream is = new FileInputStream(file);
			
			SyProfileHeader header = mHeader;
			header.load(is);
			
			File f = new File(file);
			int fSize = (int) f.length();
//			int fAva = is.available();
			
			// load profile into memory
//			mData = new byte[is.available()];
			mData = new byte[fSize];
			byte[] data = mData;
			is.read(data, 14 , data.length-14);
			is.close();

			mSerIDBegin = HEADER_SIZE;
			mValiadTableBegin = mSerIDBegin + header.mTotalSerialNo * SERIALNO_LENGTH;
			mContentIDBegin = mValiadTableBegin + header.mTotalEntryNo;
			ret = true;
		} catch (IOException ex) {
			ex.printStackTrace();
		} catch (MebookException e) {
			e.printStackTrace();
		}
		return ret;
	}
}
