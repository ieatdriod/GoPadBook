package tw.com.soyong.mebook;

import java.io.UnsupportedEncodingException;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Mebook
//  @ File Name : SyItem.java
//  @ Date : 2009/3/23
//  @ Author : Victor
//
//

public class SyItem {
	
    // File Format
    static final int SY_TAG_LEN = 7;
    static final int SY_HD_SIZE = 24;
    static final int MAX_CHILD_ITEM = 10000;

    // SyItem Header
    /** Tag ID, its length in file is SY_TAG_LEN */    
	public String mID;
	/** Size of the header in file; It should be SY_HD_SIZE. */
	public int mHdSize;
	/** Flag of this node. */
	public int mFlag;
	/** Number of items, 0 for a leaf node. */
	public int mItem;
	/** A value interpreted by the node itself. */
	public int mValue;
	/** The size of this node in byte. */
	public int mSize;
	
	/** Data buffer to hold the leaf data. */
	public byte [] mLeafData;
	/** Position of this node in file. */
	public long mPosition;
	public transient int mItemCount;
	
    /** Type definition for nFlag. */
	static final int TAG_FLAG_TYPE_MASK     = 0x0000000f;
	static final int TAG_FLAG_TYPE_NODE     = 0; // node item; otherwise leaf item
	static final int TAG_FLAG_TYPE_TXT      = 1; // text leaf item
	static final int TAG_FLAG_TYPE_WORD     = 2; // short array leaf item
	static final int TAG_FLAG_TYPE_LONG     = 3; // long array leaf item
	static final int TAG_FLAG_TYPE_WCHAR    = 4; // wchar array leaf item
	static final int TAG_FLAG_TYPE_DIB      = 5; // DIB leaf item
	static final int TAG_FLAG_TYPE_BYTE     = 6; // BYTE leaf item
	static final int TAG_FLAG_TYPE_STRUCT   = 7; // struct leaf item
	static final int TAG_FLAG_TYPE_JPG      = 8; // jpeg leaf item
	static final int TAG_FLAG_TYPE_TABLE    = 9; // table leaf item
	public static final int TAG_FLAG_TYPE_BMP      = 10; // BMP leaf item (BMP header+ dib data)
    
	
	static public int getSyType(SyItem si) {
		return (si.mFlag & TAG_FLAG_TYPE_MASK);
	}
	
	static public boolean isBmp(SyItem si) {
		return (getSyType(si)==TAG_FLAG_TYPE_BMP);
	}

	static public boolean isDIB(SyItem si) {
		return (getSyType(si)==TAG_FLAG_TYPE_DIB);
	}

	
	static public boolean isByte(SyItem si) {
		return (getSyType(si)==TAG_FLAG_TYPE_BYTE);
	}
	
	static public boolean isJpg(SyItem si) {
		return (getSyType(si)==TAG_FLAG_TYPE_JPG);
	}
	
	static public boolean isNode(SyItem si) {
		return (getSyType(si)==TAG_FLAG_TYPE_NODE);
	}
	
	static public boolean isTxt(SyItem si) {
		return (getSyType(si)==TAG_FLAG_TYPE_TXT);
	}
	
	static public boolean isType(SyItem si, int type) {
		return (getSyType(si)==(type & TAG_FLAG_TYPE_MASK));
	}
	
	static public boolean isWchar(SyItem si) {
		return (getSyType(si)==TAG_FLAG_TYPE_WCHAR);
	}
	
	static public boolean isValidate(SyItem si) {
        if ( si.mHdSize != SY_HD_SIZE ) { return false; }
        if ( si.mItem < 0 || (isNode(si) && si.mItem > MAX_CHILD_ITEM) ) {return false;}
        if ( si.mSize < 0 ) {return false; }
        
        return true;
	}
	
	public SyItem() {
	
	}
	
	public SyItem(final byte[] data) {
		mLeafData = data;
		mFlag = TAG_FLAG_TYPE_TXT;
	}
	
	public SyItem ( final byte [] data , SyItem item ){
		mLeafData = data ;
		mFlag = item.mFlag;
		mItem = item.mItem;
	}

	public SyItem ( final byte [] data , int flag ){
		mLeafData = data ;
		mFlag = flag;
	}
	
	public SyItem( int num){
		mItem = num ;
	}

	final public String toString() {
		
		String encode = null ;
        if ( SyItem.isWchar(this) ){
        	encode = "UTF-16LE";
        } else if ( SyItem.isTxt(this)){
        	encode = "Big5";
        } else {
        	return mID;
        }
        
        String str = null;
        try {
			str = new String(mLeafData, encode);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		return str ;
	}
	
	// for android Drawable object
	final public BitmapDrawable toDrawable() throws MebookException{
		byte [] data = mLeafData;
		
		if ( data.length <= 0 || !(SyItem.isJpg(this)||SyItem.isBmp(this))){
			throw new MebookException();
		}
		
		Bitmap bmp = BitmapFactory.decodeByteArray(data, 0, data.length);
		BitmapDrawable drawable = new BitmapDrawable(bmp);
		return drawable;
	}
	
	final public Bitmap toBitmap() throws MebookException{
		byte [] data = mLeafData;
		
		if ( data.length <= 0 || !(SyItem.isJpg(this)||SyItem.isBmp(this))){
			throw new MebookException();
		}
		
		Bitmap bmp = BitmapFactory.decodeByteArray(data, 0, data.length);
		return bmp;
	}	
}
