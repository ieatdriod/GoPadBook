package tw.com.soyong.mebook;

import java.io.IOException;
import java.util.ArrayList;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Mebook
//  @ File Name : Mebook.java
//  @ Date : 2009/3/23
//  @ Author : Victor
//
//

public class Mebook {
	
	static final boolean SUPPORT_SYD = true ;
	
    /* File format */
    static final String _szLyricsBeginTag   = "LYRICSBEGIN";
    static final String _szLyricsEndTag     = "LYRICS200";
    static final String _szBookBeginTag     = "SYBOOKBEGIN";
    static final String _szBookEndTag       = "SYBOOK100";
    static final int TAG_DIGIT_BASIC_SIZE   = 5;
    static final int TAG_DIGIT_BASIC_OFFSET = 6;
    static final int TAG_DIGIT_BOOK_SIZE    = 12;
    static final int TAG_DIGIT_BOOK_OFFSET  = 12;
    static final int TAG_DIGIT_IDS3_SIZE    = 128;
    static final int TAG_DIGIT_LYRICS_SIZE  = 14;
    static final int BEGIN_TAG_LEN  = _szLyricsBeginTag.length() ;
    static final int END_TAG_LEN = _szLyricsEndTag.length();
    
	/* Data type */
    public static final int TYPE_UNKNOW         = 0;
    public static final int SY_PLAN_BOOK        = 1;     // lyrics tag only (SyPlanBook)
    public static final int IMG_BOOK      		= 2;     // lyrics tag (content) + sybook tag (pic)(ImgBook)
    public static final int SY_BOOK         	= 3 ;    // sybook only(SyBook)
	
//	ArrayList<MebookHeader> mHeader;
//	ArrayList<MebookData> mBookData;
	MebookHeader mHeader;
	MebookData mBookData;
	int mType ;
	
	//////////////////////////////////////////////////////////////////////////////////////////
    static final String beginTag [] = {"" , _szLyricsBeginTag ,_szBookBeginTag };
    static final String endTag[] = { "" , _szLyricsEndTag , _szBookEndTag } ;

    static final int getEndTagIndex(String tag) {

		int index = 0;
		int len = endTag.length;
		for (int i = 1; i < len; i++) {
			if (0 == endTag[i].compareTo(tag)) {
				index = i;
			}
		}
		return index;
	}

    static final String getBeginTag(SyInputStream file, long position) throws IOException {
        file.seek(position);
        byte [] buf = new byte[BEGIN_TAG_LEN];
        file.read(buf);
        String tag = new String (buf) ;
        buf = null;
        return tag.trim() ;
    }

    static final String getEndTag(SyInputStream file, long position) throws IOException {
        file.seek(position);
        byte [] buf = new byte[END_TAG_LEN];
        file.read(buf);
        String tag = new String (buf) ;
        buf = null;
        return tag.trim() ;
    }    
    
    static final long getOffset( SyInputStream file , long position , int offsetLen) throws IOException {
        file.seek(position);
        byte [] buf = new byte[offsetLen];
        file.read(buf);
        long offset = Long.valueOf(new String(buf));
        buf = null;
        return offset;
    }
    
    static final long getDataSize( SyInputStream file , long position , int sizeLen) throws IOException {
        file.seek(position);
        byte [] buf = new byte[sizeLen];
        file.read(buf);
        long size = Long.valueOf(new String(buf));
        buf = null;
        return size;
    }
    
    final static MebookInfo checkBookType(SyInputStream file) {

		MebookInfo bookInfo = null;
		
		if ( null == file){
			return bookInfo;
		}
		
		if ( SUPPORT_SYD ){
	        try {
				file.seek(0);
		        byte [] buf = new byte[2];
		        file.read(buf);
		        String tag = new String (buf) ;
		        if ( 0 == tag.compareTo(MebookHeader.SY_TAG) ){
		        	bookInfo = new MebookInfo();
		        	
		        	long dataSize = file.length(); // - MebookHeader.SIZE;
		        	long dataPos = 0;

					bookInfo.mDataSize.add(dataSize);
					bookInfo.mHeaderPosition.add(dataPos);
					bookInfo.mType = SY_BOOK;		// support SY BOOK only 
		        	return bookInfo;
		        }
			} catch (IOException e) {
				//e.printStackTrace();
			}
		}
		
		try {
			long position = file.length();
			String tag;
			boolean again = false;
			boolean isLyrics = false;
			boolean isSyBook = false;

			bookInfo = new MebookInfo();
			do {
				position -= (TAG_DIGIT_IDS3_SIZE + END_TAG_LEN);
				if ( position <= 0  ){
					again = false;
					break;
				}

				// get end tag
				tag = getEndTag(file, position);

				int index = 0;
				index = getEndTagIndex(tag);
				if (index <= 0) {
					again = false;
					break;
				}

				long begin = 0;
				switch (index) {
				case 1:
					position -= TAG_DIGIT_BASIC_OFFSET;
					begin = getOffset(file, position, TAG_DIGIT_BASIC_OFFSET);
					isLyrics = true;
					break;
				case 2:
					position -= TAG_DIGIT_BOOK_OFFSET;
					begin = getOffset(file, position, TAG_DIGIT_BOOK_OFFSET);
					isSyBook = true;
					break;
				default:
					break;
				}

				position -= begin;
				// get begin tag
				tag = getBeginTag(file, position);
				
				if (0 != beginTag[index].compareTo(tag)) {
					again = false; // begin tag not match!
				} else {
					long dataPos = position + BEGIN_TAG_LEN + TAG_DIGIT_LYRICS_SIZE; 
//					position += BEGIN_TAG_LEN + TAG_DIGIT_LYRICS_SIZE;
					long dataSize;
					switch (index) {
					case 1:
						dataSize = getDataSize(file, dataPos, TAG_DIGIT_BASIC_SIZE);
						//position += TAG_DIGIT_BASIC_SIZE;
						dataPos += TAG_DIGIT_BASIC_SIZE;

						bookInfo.mDataSize.add(dataSize);
						bookInfo.mHeaderPosition.add(dataPos);
						again = true ;	// try to find another data block
						break;
					case 2:
						dataSize = getDataSize(file, dataPos, TAG_DIGIT_BOOK_SIZE);
						//position += TAG_DIGIT_BOOK_SIZE;
						dataPos += TAG_DIGIT_BOOK_SIZE;

						bookInfo.mDataSize.add(dataSize);
						bookInfo.mHeaderPosition.add(dataPos);
						
						again = false ; // fore exit do-while()
						break;
					default:
						break;
					}
				}
			} while (again);

			int ret = TYPE_UNKNOW;
			if (true == isLyrics && true == isSyBook) {
				ret = IMG_BOOK;
			} else if (true == isSyBook) {
				ret = SY_BOOK;
			} else if (true == isLyrics) {
				ret = SY_PLAN_BOOK;
			}

			if (ret != TYPE_UNKNOW) {
				bookInfo.mType = ret;
			} else {
				bookInfo = null;
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return bookInfo;
	}
    
    
	static public MebookInfo isMebook(final SyInputStream is) {
		
		MebookInfo bookInfo = null;
        try {
            bookInfo = checkBookType(is);
            //is.close();
            //is = null;
            
            if ( null != bookInfo ){
            	//bookInfo.mFileName = file;
            	
            	MebookHeader header = new MebookHeader();
          		header.load(is , bookInfo.mHeaderPosition.get(0) );
          		
          		bookInfo.mBookID = header.mBookID;
          		bookInfo.mID = header.mContentID;
          		bookInfo.mTitle = header.mTitleName;
            }
        } catch (MebookException e) {
			e.printStackTrace();
		}
        return bookInfo;
	}    
    
	static public MebookInfo isMebook(String file) {
		
		MebookInfo bookInfo = null;
        try {
        	
        	SyInputStream rf = new SyInputStream(file);
        	if ( null == rf ){
        		return bookInfo;
        	}
        	
//        	int contentIndex = AnReader.mMeta.getSYDContainerIndexFromTrack(1);
//        	if ( -1 == contentIndex ){
//        		return null;
//        	}
//        	rf.setGsiParam(AnReader.mSC, contentIndex);

            bookInfo = checkBookType(rf);
            rf.close();
            rf = null;
            
            if ( null != bookInfo ){
            	bookInfo.mFileName = file;
            	
            	MebookHeader header = new MebookHeader();
          		header.load(file , bookInfo.mHeaderPosition.get(0) );
          		
          		bookInfo.mBookID = header.mBookID;
          		bookInfo.mID = header.mContentID;
          		bookInfo.mTitle = header.mTitleName;
            }
        } catch (IOException ex){
        	ex.printStackTrace();
        } catch (MebookException e) {
			e.printStackTrace();
		}
        return bookInfo;
	}
	
	public Mebook() {
	}
	
	
	public void load(final MebookInfo bookInfo, final SyInputStream is) {
		
		unload();
		
		mType = bookInfo.mType;
		int type = mType ;
		//String fileName = bookInfo.mFileName;
		ArrayList<Long> headerPos = bookInfo.mHeaderPosition;
		ArrayList<Long> dataSize = bookInfo.mDataSize;
		
		try {
			MebookDataFactory factory = new MebookDataFactory();
			factory.loadData(type, is, headerPos, dataSize, this);
			
		} catch (MebookException e) {
			//e.printStackTrace();
		}
	}	
	
	
	public void load(MebookInfo bookInfo) {
		
		unload();
		
		mType = bookInfo.mType;
		int type = mType ;
		String fileName = bookInfo.mFileName;
		ArrayList<Long> headerPos = bookInfo.mHeaderPosition;
		ArrayList<Long> dataSize = bookInfo.mDataSize;
		
		try {
			MebookDataFactory factory = new MebookDataFactory();
			factory.loadData(type, fileName, headerPos, dataSize, this);
			
		} catch (MebookException e) {
			e.printStackTrace();
		}
	}

	public void unload() {
		
		mHeader = null;
		mBookData = null;
	}
	
	
	final public int getType() {
		return mType;
	}
	
//	final public int getEos() {
//		mBookData.get(0).
//		return 0 ;
//	}
	
	final public MebookData getData() {
		return mBookData;
	}
	
	final public MebookHeader getHeader() {
		return mHeader;
	}
}
